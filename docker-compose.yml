services:
  clock:
    build:
      context: ./services/clock
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./services/clock/src:/app/src
      - ./services/clock/package.json:/app/package.json
      - ./services/clock/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - clock
      - rabbitmq
    depends_on:
      clock-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  mail:
    build:
      context: ./services/mail
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./services/mail/src:/app/src
      - ./services/mail/package.json:/app/package.json
      - ./services/mail/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - mail
      - rabbitmq
    depends_on:    
      mail-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  read:
    build:
      context: ./services/read
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./services/read/src:/app/src
      - ./services/read/package.json:/app/package.json
      - ./services/read/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - read
      - rabbitmq    
    depends_on:    
      read-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  register:
    build:
      context: ./services/register
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./services/register/src:/app/src
      - ./services/register/package.json:/app/package.json
      - ./services/register/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - register
      - rabbitmq
    depends_on:    
      register-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  score:
    build:
      context: ./services/score
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./services/score/src:/app/src
      - ./services/score/package.json:/app/package.json
      - ./services/score/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - score
      - rabbitmq
    depends_on:
      score-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  target:
    build:
      context: ./services/target
      dockerfile: Dockerfile.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    stdin_open: true
    env_file:
      - .env  
    volumes:
      - ./services/target/src:/app/src
      - ./services/target/package.json:/app/package.json
      - ./services/target/package-lock.json:/app/package-lock.json
    networks:
      - target
      - rabbitmq
    depends_on:
      target-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/auth/src:/app/src
      - ./services/auth/package.json:/app/package.json
      - ./services/auth/package-lock.json:/app/package-lock.json
    stdin_open: true
    env_file:
      - .env
    networks:
      - auth
      - rabbitmq
    depends_on:
      auth-mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile.dev
    ports:      
      - ${GATEWAY_PORT}:5008
    volumes:
      - ./services/gateway/src:/app/src
      - ./services/gateway/package.json:/app/package.json
      - ./services/gateway/package-lock.json:/app/package-lock.json
      - ./services/gateway/routes.config.js:/app/routes.config.js
      - ./services/gateway/swagger.yaml:/app/swagger.yaml
    stdin_open: true
    env_file:
      - .env
    networks:
      - gateway
      - rabbitmq
      - auth
      - mail
      - clock
      - read
      - register
      - score
      - target
    depends_on:
      gateway-mongodb:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4.0.7
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    restart: always
    networks:
      - rabbitmq
    attach: false

  auth-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_AUTH_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - auth-mongodb-data:/data/db
    networks:
      - auth

  mail-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_MAIL_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - mail-mongodb-data:/data/db
    networks:
      - mail

  clock-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_CLOCK_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - clock-mongodb-data:/data/db
    networks:
      - clock

  read-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_READ_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - read-mongodb-data:/data/db
    networks:
      - read

  register-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_REGISTER_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - register-mongodb-data:/data/db
    networks:
      - register

  score-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_SCORE_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - score-mongodb-data:/data/db
    networks:
      - score

  target-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_TARGET_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - target-mongodb-data:/data/db
    networks:
      - target

  gateway-mongodb:
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_GATEWAY_PORT}:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - gateway-mongodb-data:/data/db
    networks:
      - gateway

networks:
  auth:
    driver: bridge
  mail:
    driver: bridge
  clock:
    driver: bridge
  rabbitmq:
    driver: bridge
  read:
    driver: bridge
  register:
    driver: bridge  
  score:
    driver: bridge
  target:
    driver: bridge
  gateway:
    driver: bridge

volumes:
  auth-mongodb-data:
  mail-mongodb-data:
  clock-mongodb-data:
  read-mongodb-data:
  register-mongodb-data:
  score-mongodb-data:
  target-mongodb-data:
  gateway-mongodb-data: